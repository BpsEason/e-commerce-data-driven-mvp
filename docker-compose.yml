# e-commerce-data-driven-mvp/docker-compose.yml
# Docker Compose 文件，用於定義和運行多容器 Docker 應用程式。

version: '3.8'

services:
  # Nginx 服務，作為反向代理，將外部請求路由到 Laravel 應用程式
  nginx:
    image: nginx:stable-alpine # 使用 Nginx 的穩定版 Alpine 映像，體積小
    ports:
      - "80:80" # 將主機的 80 端口映射到容器的 80 端口
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # 掛載 Nginx 配置文件
      - ./laravel-backend:/var/www/html # 掛載 Laravel 應用程式目錄
    depends_on:
      - php # 確保 php 服務在 nginx 啟動前運行
      - fastapi # 確保 fastapi 服務在 nginx 啟動前運行

  # PHP 服務，運行 Laravel 應用程式的 PHP-FPM 進程
  php:
    build:
      context: ./laravel-backend # Dockerfile 的上下文路徑
      dockerfile: Dockerfile.php # 指定 Laravel 的 Dockerfile
    volumes:
      - ./laravel-backend:/var/www/html # 掛載 Laravel 應用程式目錄
    environment:
      # Laravel 環境變數，從 .env 文件中讀取，這裡提供默認值
      - DB_CONNECTION=mysql
      - DB_HOST=db # 數據庫服務的名稱，由 Docker Compose 管理
      - DB_PORT=3306
      - DB_DATABASE=laravel
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - FASTAPI_URL=http://fastapi:8000 # FastAPI 服務的 URL，由 Docker Compose 管理
      # Laravel 的 APP_KEY 會在啟動後通過 `php artisan key:generate` 生成
    depends_on:
      - db # 確保數據庫服務在 php 服務啟動前運行

  # FastAPI 數據服務，用於數據分析和推薦
  fastapi:
    build:
      context: ./fastapi-data-service # Dockerfile 的上下文路徑
      dockerfile: Dockerfile # 指定 FastAPI 的 Dockerfile
    volumes:
      - ./fastapi-data-service:/app # 掛載 FastAPI 應用程式目錄
    ports:
      - "8000:8000" # 將主機的 8000 端口映射到容器的 8000 端口
    environment:
      # FastAPI 可以通過這個 URL 調用 Laravel 的 API，如果需要獲取原始數據
      # 但在此 MVP 中，FastAPI 主要處理內部模擬數據或直接讀取數據庫
      - LARAVEL_API_URL=http://php:9000/api # Laravel PHP-FPM 服務在容器內部的地址
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # FastAPI 啟動命令

  # MySQL 數據庫服務
  db:
    image: mysql:8.0 # 使用 MySQL 8.0 映像
    environment:
      # MySQL 環境變數，用於初始化數據庫
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: laravel
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql # 將數據庫數據持久化到 Docker volume

# Docker volumes，用於持久化數據，即使容器被刪除數據也不會丟失
volumes:
  db_data:
