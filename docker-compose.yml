version: '3.8'

services:
  # Laravel Backend Service
  laravel_app:
    build:
      context: ./laravel-backend
      dockerfile: Dockerfile
    image: laravel_app_image
    container_name: laravel_backend
    restart: unless-stopped
    # Laravel's Nginx is now proxied by the main Nginx service, not directly exposed to host
    # ports:
    #   - "8000:80"
    volumes:
      - ./laravel-backend:/var/www/html # Mount source code
    depends_on:
      - mysql
      - redis # Add dependency on Redis
    environment:
      # Laravel .env variables
      DB_HOST: mysql
      DB_DATABASE: ecommerce_db
      DB_USERNAME: root
      DB_PASSWORD: password
      APP_URL: http://localhost # This will be set by the host, actual request will come via Nginx
      CACHE_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FASTAPI_URL: http://python_app:8001 # Laravel calling FastAPI internally
    networks:
      - ecommerce_network

  # Python FastAPI Backend Service
  python_app:
    build:
      context: ./python-backend
      dockerfile: Dockerfile
    image: python_app_image
    container_name: python_backend
    restart: unless-stopped
    # FastAPI is now proxied by the main Nginx service, not directly exposed to host
    # ports:
    #   - "8001:8001"
    volumes:
      - ./python-backend:/app # Mount source code
      - ./python-backend/data:/app/data # Mount data directory for persistent mock data
    environment:
      # Pass environment variables to Python app if needed
      DATABASE_URL: sqlite:///./data/sql_app.db # Example for SQLite
      SECRET_KEY: your-fastapi-secret-key # Change this!
    networks:
      - ecommerce_network

  # Vue.js Frontend Service (for development - will be built by npm run dev)
  vue_app:
    build:
      context: ./vue-frontend
      dockerfile: Dockerfile
    image: vue_app_image
    container_name: vue_frontend
    restart: unless-stopped
    # Vue app runs its own dev server on 8080 inside the container, proxied by Nginx
    volumes:
      - ./vue-frontend:/app # Mount source code for development
      - /app/node_modules # Avoid overwriting node_modules during development
    depends_on:
      - laravel_app # Vue depends on Laravel for its APIs
      - python_app # Vue depends on Python for its APIs
    networks:
      - ecommerce_network

  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    ports:
      - "3306:3306" # Expose for host access and debugging
    environment:
      MYSQL_DATABASE: ecommerce_db
      MYSQL_ROOT_PASSWORD: password # Use a strong password in production!
      MYSQL_ALLOW_EMPTY_PASSWORD: "no" # Set to "no" for stronger security
    volumes:
      - mysql_data:/var/lib/mysql # Persistent data volume
    networks:
      - ecommerce_network

  # Redis Cache Service
  redis:
    image: redis:alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379" # Expose for host access and debugging
    volumes:
      - redis_data:/data # Persistent data for Redis
    networks:
      - ecommerce_network

  # Nginx Proxy (Unified entry point, Gzip, Caching, API Proxying)
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    ports:
      - "80:80" # Expose Nginx on host port 80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Main Nginx config
      - ./nginx/conf.d:/etc/nginx/conf.d:ro       # Include site-specific configs
    depends_on:
      - laravel_app
      - python_app
      - vue_app # Nginx needs Vue app running to proxy its dev server
    networks:
      - ecommerce_network

# Docker Networks
networks:
  ecommerce_network:
    driver: bridge

# Docker Volumes for persistent data
volumes:
  mysql_data:
  redis_data:
